<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="com.aero.ic"/>

    <batch:job id="fdrDataLoadJob" job-repository="jobRepository">
        <batch:step id="fdrDataLoad">
            <batch:tasklet>
                <batch:chunk reader="multiFileReader" writer="fdrMessageWriter" commit-interval="1"/>
            </batch:tasklet>
        </batch:step>
    </batch:job>

    <bean id="multiFileReader" class="org.springframework.batch.item.file.MultiResourceItemReader"
          p:delegate-ref="fdrFileReader"
          p:resources="file://#{aeroApplicationConfig.dropZone}/#{aeroApplicationConfig.fileNamePattern}"
          p:strict="false" p:saveState="false"/>

    <bean id="fdrFileReader" class="com.aero.ic.batch.reader.file.EdifactFileItemReader"
          p:edifactMessageMapper-ref="fdrMessageMapper" p:encoding="UTF-8" p:strict="false"
          p:messageReaderFactory-ref="fdrMessageReaderFactory"
          p:edifactTerminatorPolicy-ref="edifactTerminatorPolicy"
          p:saveState="false"/>

    <bean id="fdrMessageReaderFactory" class="com.aero.ic.batch.reader.message.DefaultEdifactMessageReaderFactory"/>

    <bean id="fdrMessageMapper" class="com.aero.ic.fdr.mapper.FDRMessageMapper" p:parserContext-ref="fdrParserContext"/>

    <bean id="fdrParserContext" class="com.aero.ic.batch.context.ParserContext" p:ediMappingConfig="#{aeroApplicationConfig.fdrMappingFile}"/>

    <bean id="fdrMessageWriter" class="com.aero.ic.fdr.writer.FDRMessageWriter"
          p:encoding="UTF-8" p:resource="file://#{aeroApplicationConfig.outZone}" p:writeXml="true"/>

    <bean id="fdrLineAggregator" class="org.springframework.batch.item.file.transform.PassThroughLineAggregator"/>
</beans>